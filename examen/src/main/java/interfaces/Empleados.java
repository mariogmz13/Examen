/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package interfaces;

import com.toedter.calendar.JDateChooser;
import data.DataEmpleado;
import java.sql.ResultSet;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import javax.swing.JButton;
import javax.swing.JOptionPane;
import javax.swing.JTextField;
import net.proteanit.sql.DbUtils;

/**
 *
 * @author mega0
 */
public class Empleados extends javax.swing.JFrame {

    /**
     * Creates new form Empleados
     */
    int OPTION;

    public Empleados() {
        initComponents();

        hideEditButtons();

//        unEnableButtons();
        unEditableFields();

        loadEmployee();
        loadCategories();

        //estable fecha limite
        JDateChooser dateChooser = DateChooserNacimiento;
        dateChooser.setDateFormatString("yyyy-MM-dd");
        dateChooser.getJCalendar().setMaxSelectableDate(new Date());

        

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    private ArrayList<Integer> listIdTipo;

    private void loadCategories() {
        listIdTipo = new ArrayList<>();
        try {
            DataEmpleado empleado = new DataEmpleado();
            ResultSet rs = empleado.listarTipoEmpleados();
            while (rs.next()) {
                String name = rs.getString("nombre");
                int id = rs.getInt("id");
                System.out.println(id);
                listIdTipo.add(id);
                jComboBoxTipoE.addItem(name);

            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, e);
        }
    }

    private void hideEditButtons() {
        ButtonGuardar.setVisible(false);
        ButtonDescartar.setVisible(false);
    }

    private void showEditButtons() {
        ButtonGuardar.setVisible(true);
        ButtonDescartar.setVisible(true);
    }

    private JTextField[] jTextFields() {
        JTextField[] fields = {TextFieldNombre, TextFieldApellidoP, TextFieldApellidoM, TextFieldRFC, TextFieldSalario, TextFieldHorasSemana};
        return fields;
    }

    private void editableFields() {
        JTextField[] fields = jTextFields();
        for (JTextField field : fields) {
            field.setEditable(true);
        }
        DateChooserNacimiento.setEnabled(true);
        jComboBoxTipoE.setEnabled(true);
    }

    private void unEditableFields() {
        JTextField[] fields = jTextFields();
        for (JTextField field : fields) {
            field.setEditable(false);
        }
        DateChooserNacimiento.setEnabled(false);
        jComboBoxTipoE.setEnabled(false);
    }

    private void cleanFields() {
        JTextField[] fields = jTextFields();
        for (JTextField field : fields) {
            field.setText("");
        }
        DateChooserNacimiento.setCalendar(null);
    }

    private JButton[] jButtons() {
        JButton[] buttons = {ButtonAgregar, ButtonEliminar, ButtonModificar};
        return buttons;
    }

    private void enableButtons() {
        JButton[] buttons = jButtons();
        for (JButton button : buttons) {
            button.setEnabled(true);
        }
    }

    private void unEnableButtons() {
        JButton[] buttons = jButtons();
        for (JButton button : buttons) {
            button.setEnabled(false);
        }
    }

    void seleccionarFecha() throws ParseException {
        try {
            String fechaNacimiento = String.valueOf(jTableEmpleado.getValueAt(jTableEmpleado.getSelectedRow(), 4));
            System.out.println(fechaNacimiento);
            java.util.Date fechaParseada = new SimpleDateFormat("yyyy-MM-dd").parse(fechaNacimiento);
            DateChooserNacimiento.setDate(fechaParseada);
        } catch (Exception e) {
            System.out.println(e);
        }
    }

    private void loadEmployee() {
        try {
            DataEmpleado data = new DataEmpleado();
            ResultSet rs = data.listarEmpleados();
            jTableEmpleado.setModel(DbUtils.resultSetToTableModel(rs));
            jTableEmpleado.getColumnModel().getColumn(5).setMinWidth(0);
            jTableEmpleado.getColumnModel().getColumn(5).setMaxWidth(0);
            //bloquea la edicion de las celdas
            jTableEmpleado.setDefaultEditor(Object.class, null);
            data.cerrarConexion();

        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, e);
        }
    }

    private boolean agregarEmpleado(String nombre, String apellidoP, String apellidoM, String rfc,
            String nacimiento, int tipoEmpleado, String salario, String horasSemana) {
        try {
            DataEmpleado empleado = new DataEmpleado();

            if (empleado.create(nombre, apellidoP, apellidoM, rfc, nacimiento, tipoEmpleado, salario, horasSemana)) {
                return true;
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, e);
        }
        return false;
    }

    private boolean rfcRegistrado(String rfc) {
        try {
            DataEmpleado empleado = new DataEmpleado();
            boolean existe = empleado.rfcRegistrado(rfc).next();
//            System.out.println(empleado.rfcRegistrado(rfc).getRow());

            if (existe) {
                return true;
            } else {
                return false;
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, e);
        }
        return false;
    }

    private boolean editarEmpleado(String nombre, String apellidoP, String apellidoM, String rfc,
            String nacimiento, int tipoEmpleado, String salario, String horasSemana) {
        try {
            DataEmpleado empleado = new DataEmpleado();

            if (empleado.update(nombre, apellidoP, apellidoM, rfc, nacimiento, tipoEmpleado, salario, horasSemana)) {
                return true;
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, e);
        }
        return false;
    }

    private boolean deleteEmployee(String rfc) {
        try {
            DataEmpleado empleado = new DataEmpleado();

            if (empleado.delete(rfc)) {
                return true;
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, e);
        }
        return false;
    }

    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jTableEmpleado = new javax.swing.JTable();
        TextFieldNombre = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        TextFieldApellidoP = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        TextFieldApellidoM = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        TextFieldRFC = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        TextFieldSalario = new javax.swing.JTextField();
        jLabel8 = new javax.swing.JLabel();
        TextFieldHorasSemana = new javax.swing.JTextField();
        DateChooserNacimiento = new com.toedter.calendar.JDateChooser();
        ButtonAgregar = new javax.swing.JButton();
        ButtonGuardar = new javax.swing.JButton();
        ButtonDescartar = new javax.swing.JButton();
        ButtonEliminar = new javax.swing.JButton();
        ButtonModificar = new javax.swing.JButton();
        jComboBoxTipoE = new javax.swing.JComboBox<>();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setResizable(false);

        jScrollPane1.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(255, 255, 255), 2, true));

        jTableEmpleado.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 1, 1, 1));
        jTableEmpleado.setFont(new java.awt.Font("Calibri Light", 0, 12)); // NOI18N
        jTableEmpleado.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {

            }
        ));
        jTableEmpleado.setToolTipText("");
        jTableEmpleado.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        jTableEmpleado.getTableHeader().setResizingAllowed(false);
        jTableEmpleado.getTableHeader().setReorderingAllowed(false);
        jTableEmpleado.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTableEmpleadoMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(jTableEmpleado);

        TextFieldNombre.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                TextFieldNombreActionPerformed(evt);
            }
        });
        TextFieldNombre.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                TextFieldNombreKeyTyped(evt);
            }
        });

        jLabel1.setText("Nombre");

        jLabel2.setText("Apellido Patermo");

        TextFieldApellidoP.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                TextFieldApellidoPActionPerformed(evt);
            }
        });
        TextFieldApellidoP.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                TextFieldApellidoPKeyTyped(evt);
            }
        });

        jLabel3.setText("Apellido Materno");

        TextFieldApellidoM.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                TextFieldApellidoMActionPerformed(evt);
            }
        });
        TextFieldApellidoM.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                TextFieldApellidoMKeyTyped(evt);
            }
        });

        jLabel4.setText("RFC");

        TextFieldRFC.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                TextFieldRFCActionPerformed(evt);
            }
        });
        TextFieldRFC.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                TextFieldRFCKeyTyped(evt);
            }
        });

        jLabel5.setText("Fecha Nacimiento");

        jLabel6.setText("Tipo Empleado");

        jLabel7.setText("Salario");

        TextFieldSalario.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                TextFieldSalarioActionPerformed(evt);
            }
        });
        TextFieldSalario.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                TextFieldSalarioKeyTyped(evt);
            }
        });

        jLabel8.setText("Horas por semana");

        TextFieldHorasSemana.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                TextFieldHorasSemanaActionPerformed(evt);
            }
        });
        TextFieldHorasSemana.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                TextFieldHorasSemanaKeyTyped(evt);
            }
        });

        ButtonAgregar.setText("Crear");
        ButtonAgregar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ButtonAgregarActionPerformed(evt);
            }
        });

        ButtonGuardar.setText("Guardar");
        ButtonGuardar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ButtonGuardarActionPerformed(evt);
            }
        });

        ButtonDescartar.setText("Descartar");
        ButtonDescartar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ButtonDescartarActionPerformed(evt);
            }
        });

        ButtonEliminar.setText("Eliminar");
        ButtonEliminar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ButtonEliminarActionPerformed(evt);
            }
        });

        ButtonModificar.setText("Modificar");
        ButtonModificar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ButtonModificarActionPerformed(evt);
            }
        });

        jComboBoxTipoE.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] {  }));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(ButtonDescartar, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(TextFieldNombre)
                    .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(TextFieldRFC)
                    .addComponent(jLabel4, javax.swing.GroupLayout.DEFAULT_SIZE, 250, Short.MAX_VALUE)
                    .addComponent(jLabel5, javax.swing.GroupLayout.DEFAULT_SIZE, 250, Short.MAX_VALUE)
                    .addComponent(jLabel6, javax.swing.GroupLayout.DEFAULT_SIZE, 250, Short.MAX_VALUE)
                    .addComponent(DateChooserNacimiento, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(ButtonGuardar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                    .addComponent(jLabel2, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 120, Short.MAX_VALUE)
                                    .addComponent(TextFieldApellidoP, javax.swing.GroupLayout.Alignment.LEADING))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(TextFieldApellidoM)
                                    .addComponent(jLabel3, javax.swing.GroupLayout.DEFAULT_SIZE, 118, Short.MAX_VALUE)))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                    .addComponent(jLabel7, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(TextFieldSalario, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 115, Short.MAX_VALUE))
                                .addGap(18, 18, 18)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(TextFieldHorasSemana, javax.swing.GroupLayout.PREFERRED_SIZE, 117, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel8, javax.swing.GroupLayout.PREFERRED_SIZE, 115, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addComponent(jComboBoxTipoE, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(ButtonAgregar)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(ButtonModificar)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(ButtonEliminar))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 624, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 323, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                        .addGap(17, 17, 17)
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(TextFieldNombre, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel2)
                            .addComponent(jLabel3))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(TextFieldApellidoP, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(TextFieldApellidoM, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel4)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(TextFieldRFC, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jLabel5)
                        .addGap(12, 12, 12)
                        .addComponent(DateChooserNacimiento, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel6)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jComboBoxTipoE, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel7)
                            .addComponent(jLabel8))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(TextFieldSalario, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(TextFieldHorasSemana, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(ButtonAgregar)
                        .addComponent(ButtonEliminar)
                        .addComponent(ButtonModificar))
                    .addComponent(ButtonGuardar))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(ButtonDescartar)
                .addContainerGap(10, Short.MAX_VALUE))
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void jTableEmpleadoMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTableEmpleadoMouseClicked
        try {
            if (jTableEmpleado.isEnabled()) {
//                idEmployee = (int) jTableEmployee.getValueAt(jTableEmployee.getSelectedRow(), 0);
                System.out.println(String.valueOf(jTableEmpleado.getValueAt(jTableEmpleado.getSelectedRow(), 0)));
                TextFieldNombre.setText(String.valueOf(jTableEmpleado.getValueAt(jTableEmpleado.getSelectedRow(), 0)));
                TextFieldApellidoP.setText((String) jTableEmpleado.getValueAt(jTableEmpleado.getSelectedRow(), 1));
                TextFieldApellidoM.setText((String) jTableEmpleado.getValueAt(jTableEmpleado.getSelectedRow(), 2));
                TextFieldRFC.setText((String) jTableEmpleado.getValueAt(jTableEmpleado.getSelectedRow(), 3));
                System.out.println(String.valueOf(jTableEmpleado.getValueAt(jTableEmpleado.getSelectedRow(), 5)));
                String category = (String) jTableEmpleado.getValueAt(jTableEmpleado.getSelectedRow(), 6);
                jComboBoxTipoE.setSelectedItem(category);
                System.out.println(category);
                seleccionarFecha();
//                TextFieldTipoEmpleado.setText(String.valueOf(jTableEmpleado.getValueAt(jTableEmpleado.getSelectedRow(), 6)));
                TextFieldSalario.setText(String.valueOf(jTableEmpleado.getValueAt(jTableEmpleado.getSelectedRow(), 7)));
                TextFieldHorasSemana.setText(String.valueOf(jTableEmpleado.getValueAt(jTableEmpleado.getSelectedRow(), 8)));
            }
        } catch (Exception e) {
            System.out.println(e);
        }
    }//GEN-LAST:event_jTableEmpleadoMouseClicked

    private void TextFieldNombreActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_TextFieldNombreActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_TextFieldNombreActionPerformed

    private void TextFieldApellidoPActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_TextFieldApellidoPActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_TextFieldApellidoPActionPerformed

    private void TextFieldApellidoMActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_TextFieldApellidoMActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_TextFieldApellidoMActionPerformed

    private void TextFieldRFCActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_TextFieldRFCActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_TextFieldRFCActionPerformed

    private void TextFieldSalarioActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_TextFieldSalarioActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_TextFieldSalarioActionPerformed

    private void TextFieldHorasSemanaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_TextFieldHorasSemanaActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_TextFieldHorasSemanaActionPerformed

    private void ButtonAgregarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ButtonAgregarActionPerformed
        // TODO add your handling code here:
        jTableEmpleado.setEnabled(false);
        editableFields();
        cleanFields();
        TextFieldNombre.requestFocus();
        unEnableButtons();
        showEditButtons();
        OPTION = 1;


    }//GEN-LAST:event_ButtonAgregarActionPerformed

    private void ButtonDescartarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ButtonDescartarActionPerformed

        //para no estar descartando los campos si es que no se escribio nad
        int option = JOptionPane.showConfirmDialog(null, "¿Esta seguro de querer descartar los datos?.", "DESCARTAR", JOptionPane.OK_CANCEL_OPTION);
        if (option == JOptionPane.OK_OPTION) {
            jTableEmpleado.setEnabled(true);
            hideEditButtons();
            unEditableFields();
            enableButtons();
            cleanFields();
        }

    }//GEN-LAST:event_ButtonDescartarActionPerformed

    boolean validarFormatoRFC(String rfc){
//        String Formato = "GAAM990131SL3";
        
        Matcher matcher = Pattern.compile("^([A-ZÑ\\x26]{3,4}([0-9]{2})(0[1-9]|1[0-2])(0[1-9]|1[0-9]|2[0-9]|3[0-1]))([A-Z\\d]{3})?$").matcher(rfc);
        if (matcher.find()) {
            return true;
        }else{
            return false;
        }
    }
    
    private void ButtonGuardarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ButtonGuardarActionPerformed

        String nombre = TextFieldNombre.getText();
        String apellidoP = TextFieldApellidoP.getText();
        String apellidoM = TextFieldApellidoM.getText();
        String rfc = TextFieldRFC.getText();
        String nacimiento = null;
        int tipoEmpleado = listIdTipo.get(jComboBoxTipoE.getSelectedIndex());
//        idClassroom = listIdClassrooms.get(jComboBoxClassroom.getSelectedIndex());
        System.out.println(tipoEmpleado);
        String salarioHora = TextFieldSalario.getText();
        String horaTrabajoSemana = TextFieldHorasSemana.getText();

        String formato = DateChooserNacimiento.getDateFormatString();
        Date date = DateChooserNacimiento.getDate();
        SimpleDateFormat sdf = new SimpleDateFormat(formato);

//fnacim = String.valueOf(sdf.format(date));
        System.out.println(nombre + "," + apellidoP + "," + apellidoM + "," + rfc + "," + nacimiento + "," + tipoEmpleado + "," + salarioHora + "," + horaTrabajoSemana + ",");

        if (nombre.length() > 0 && apellidoP.length() > 0 && apellidoM.length() > 0) {
            switch (OPTION) {
                //Agregar
                case 1:
                    
                    if (validarFormatoRFC(rfc) == false) {
                        JOptionPane.showMessageDialog(this, "El formato del RFC es incorrecto", "RFC invalido", JOptionPane.INFORMATION_MESSAGE);
                        break;
                    }
                    
                    if (rfcRegistrado(rfc)) {
                        JOptionPane.showMessageDialog(this, "RFC ya registrado", "Problema de duplicidad", JOptionPane.INFORMATION_MESSAGE);

                    } else {

                        if (date != null) {
                            nacimiento = String.valueOf(sdf.format(date));
                            System.out.println("NO Vacia");
                            if (agregarEmpleado(nombre, apellidoP, apellidoM, rfc, nacimiento, tipoEmpleado, salarioHora, horaTrabajoSemana)) {
                                JOptionPane.showMessageDialog(this, "Empleado agregado exitosamente", "AGREGADO", JOptionPane.INFORMATION_MESSAGE);
                                loadEmployee();
                                hideEditButtons();
                                unEditableFields();
                                enableButtons();
                                cleanFields();
                            }

                        } else {
                            if (agregarEmpleado(nombre, apellidoP, apellidoM, rfc, "", tipoEmpleado, salarioHora, horaTrabajoSemana)) {
                                JOptionPane.showMessageDialog(this, "Empleado agregado exitosamente", "AGREGADO", JOptionPane.INFORMATION_MESSAGE);
                                loadEmployee();
                                hideEditButtons();
                                unEditableFields();
                                enableButtons();
                                cleanFields();
                            }

                        }
                    }

                    break;
                case 2:
                    //Modificar
                    if (date != null) {
                        nacimiento = String.valueOf(sdf.format(date));
                        System.out.println("NO Vacia");
                        if (editarEmpleado(nombre, apellidoP, apellidoM, rfc, nacimiento, tipoEmpleado, salarioHora, horaTrabajoSemana)) {
                            JOptionPane.showMessageDialog(this, "Empleado actualizado exitosamente", "AGREGADO", JOptionPane.INFORMATION_MESSAGE);
                            loadEmployee();
                            hideEditButtons();
                            unEditableFields();
                            enableButtons();
                            cleanFields();
                        }
                        ;
                    } else {
                        if (editarEmpleado(nombre, apellidoP, apellidoM, rfc, "", tipoEmpleado, salarioHora, horaTrabajoSemana)) {
                            JOptionPane.showMessageDialog(this, "Empleado actualizado exitosamente", "AGREGADO", JOptionPane.INFORMATION_MESSAGE);
                            loadEmployee();
                            hideEditButtons();
                            unEditableFields();
                            enableButtons();
                            cleanFields();
                        }

                    }
//                    
                    break;

            }
//            idEmployee = -1;
            jTableEmpleado.setEnabled(true);
            this.requestFocus();

        } else {
            JOptionPane.showMessageDialog(this, "Campos Vacios", "ERROR DE ACCESO", JOptionPane.INFORMATION_MESSAGE);
        }
    }//GEN-LAST:event_ButtonGuardarActionPerformed

    private void ButtonEliminarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ButtonEliminarActionPerformed
        try {
            String selected = (String) jTableEmpleado.getValueAt(jTableEmpleado.getSelectedRow(), 3);
//            System.out.println(selected);
            String rfc = jTableEmpleado.getValueAt(jTableEmpleado.getSelectedRow(), 3).toString();
            int option = JOptionPane.showConfirmDialog(null, "¿Desea eliminar al empleado " + rfc + " ?.", "ELIMINAR", JOptionPane.OK_CANCEL_OPTION);
            if (option == JOptionPane.OK_OPTION) {

                if (deleteEmployee(selected)) {
                    JOptionPane.showMessageDialog(this, "Empleado eliminado exitosamente", "ELIMINADO", JOptionPane.INFORMATION_MESSAGE);
                    loadEmployee();
                    cleanFields();
                }

            }
        } catch (ArrayIndexOutOfBoundsException e) {
            JOptionPane.showMessageDialog(this, "Selecione el empleado a eliminar", "SELECCIONE", JOptionPane.INFORMATION_MESSAGE);
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, e, "ERROR", JOptionPane.ERROR_MESSAGE);

        }
    }//GEN-LAST:event_ButtonEliminarActionPerformed

    private void ButtonModificarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ButtonModificarActionPerformed
        try {
//            if (idEmployee != -1) {
            jTableEmpleado.getValueAt(jTableEmpleado.getSelectedRow(), 0);
            jTableEmpleado.setEnabled(false);
            unEnableButtons();
            editableFields();
            showEditButtons();
            OPTION = 2;
//            } else {
//                JOptionPane.showMessageDialog(this, "Selecione el empleado a modificar", "SELECCIONE", JOptionPane.INFORMATION_MESSAGE);
//            }

        } catch (ArrayIndexOutOfBoundsException e) {
            JOptionPane.showMessageDialog(this, "Selecione el empleado a modificar", "SELECCIONE", JOptionPane.INFORMATION_MESSAGE);
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, e, "ERROR", JOptionPane.ERROR_MESSAGE);

        }
    }//GEN-LAST:event_ButtonModificarActionPerformed

    private void TextFieldNombreKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_TextFieldNombreKeyTyped
        char letra = evt.getKeyChar();
//        String texto = TextFieldNombre.getText();
//        System.out.println(letra);
//        System.out.println(texto);
//
//        //mayuscula al principio y minusculas despues
//        if (Character.isLowerCase(letra) && texto.length() == 0) {
//            String cadena = ("" + letra).toUpperCase();
//            letra = cadena.charAt(0);
//            evt.setKeyChar(letra);
//        } else {
////            System.out.println(texto.charAt(texto.length()-1));
////            System.out.println(String.valueOf(texto.charAt(texto.length())) == " ");
//            String cadena = ("" + letra).toLowerCase();
//            letra = cadena.charAt(0);
//            evt.setKeyChar(letra);
//        }
//
//        //omite espacios al principio
//        if (String.valueOf(letra).equals(" ") && texto.length() == 0) {
//            evt.consume();
//        }
        if (TextFieldNombre.getText().length() >= 50) {
            evt.consume();
        }
//        System.out.println(TextFieldNombre.getText().length());
    }//GEN-LAST:event_TextFieldNombreKeyTyped

    private void TextFieldApellidoPKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_TextFieldApellidoPKeyTyped
        // TODO add your handling code here:
        if (TextFieldApellidoP.getText().length() >= 50) {
            evt.consume();
        }
    }//GEN-LAST:event_TextFieldApellidoPKeyTyped

    private void TextFieldApellidoMKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_TextFieldApellidoMKeyTyped
        if (TextFieldApellidoM.getText().length() >= 50) {
            evt.consume();
        }
    }//GEN-LAST:event_TextFieldApellidoMKeyTyped

    private void TextFieldRFCKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_TextFieldRFCKeyTyped
        
        String texto = TextFieldRFC.getText();
        if (texto.length() >= 13) {
            evt.consume();
        }
        char letra = evt.getKeyChar();
        System.out.println(letra);
        System.out.println(texto);

        //mayuscula al principio y minusculas despues
        if (Character.isLowerCase(letra)) {
            String cadena = ("" + letra).toUpperCase();
            letra = cadena.charAt(0);
            evt.setKeyChar(letra);
        } 
    }//GEN-LAST:event_TextFieldRFCKeyTyped

    private void TextFieldSalarioKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_TextFieldSalarioKeyTyped
        char c = evt.getKeyChar();
        System.out.println(TextFieldSalario.getText());

        if (Character.isLetter(c)) {
            getToolkit().beep();

            evt.consume();
        }
    }//GEN-LAST:event_TextFieldSalarioKeyTyped

    private void TextFieldHorasSemanaKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_TextFieldHorasSemanaKeyTyped
        char c = evt.getKeyChar();
        System.out.println(TextFieldSalario.getText());

        if (Character.isLetter(c)) {
            getToolkit().beep();

            evt.consume();
        }
    }//GEN-LAST:event_TextFieldHorasSemanaKeyTyped

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Empleados.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Empleados.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Empleados.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Empleados.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Empleados().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton ButtonAgregar;
    private javax.swing.JButton ButtonDescartar;
    private javax.swing.JButton ButtonEliminar;
    private javax.swing.JButton ButtonGuardar;
    private javax.swing.JButton ButtonModificar;
    private com.toedter.calendar.JDateChooser DateChooserNacimiento;
    private javax.swing.JTextField TextFieldApellidoM;
    private javax.swing.JTextField TextFieldApellidoP;
    private javax.swing.JTextField TextFieldHorasSemana;
    private javax.swing.JTextField TextFieldNombre;
    private javax.swing.JTextField TextFieldRFC;
    private javax.swing.JTextField TextFieldSalario;
    private javax.swing.JComboBox<String> jComboBoxTipoE;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTableEmpleado;
    // End of variables declaration//GEN-END:variables
}
